from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config.config import ADMINS
from db.repositories import get_all_specialists, get_reviews_for_specialist, get_services_for_specialist, aiosqlite
from keyboards.client import specialists_kb, main_menu
from core.settings import settings

router = Router(name=__name__)

class AddServiceFSM(StatesGroup):
    name = State()
    emoji = State()
    duration = State()
    price = State()

class DeleteServiceFSM(StatesGroup):
    select = State()
    confirm = State()

@router.message(Command("admin"))
async def admin_menu(msg: Message):
    if not msg.from_user or not msg.from_user.id:
        await msg.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if msg.from_user.id not in ADMINS:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    kb = [
        [{"text": "üë§ –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã", "callback_data": "admin_specialists"}],
        [{"text": "‚≠êÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã", "callback_data": "admin_reviews"}],
        [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", "callback_data": "add_specialist"}],
        [{"text": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", "callback_data": "edit_specialist"}],
        [{"text": "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", "callback_data": "delete_specialist"}],
        [{"text": "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", "callback_data": "manage_services"}],
        [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "view_statistics"}],
        [{"text": "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", "callback_data": "back"}]
    ]
    await msg.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup={"inline_keyboard": kb})

@router.callback_query(F.data == "admin_specialists")
async def admin_specialists(call: CallbackQuery):
    if not call.from_user or not call.from_user.id:
        await call.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    specialists = await get_all_specialists()
    text = "–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:\n\n"
    for s in specialists:
        text += f"{s['avatar']} <b>{s['name']}</b> ‚Äî {s['bio']}\n"
    await call.message.edit_text(text, reply_markup=main_menu(), parse_mode="HTML")

@router.callback_query(F.data == "admin_reviews")
async def admin_reviews(call: CallbackQuery):
    specialists = await get_all_specialists()
    text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n"
    for s in specialists:
        reviews = await get_reviews_for_specialist(s['id'])
        for r in reviews:
            text += f"{s['avatar']} <b>{s['name']}</b>: {r['text']} ({r['stars']}‚≠êÔ∏è)\n"
    await call.message.edit_text(text or "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=main_menu(), parse_mode="HTML")

@router.callback_query(F.data == "add_specialist")
async def add_specialist(call: CallbackQuery):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:")
    # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    name = "–ò–≤–∞–Ω"  # –ü—Ä–∏–º–µ—Ä –∏–º–µ–Ω–∏
    avatar = "üë®‚Äçüîß"  # –ü—Ä–∏–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞
    bio = "–ù–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"  # –ü—Ä–∏–º–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è
    # Removed redundant imports as they are now at the top of the file
    async with aiosqlite.connect(settings.db_file) as db:
        await db.execute(
            "INSERT INTO specialists (name, avatar, bio) VALUES (?, ?, ?)",
            (name, avatar, bio)
        )
        await db.commit()
    await call.message.edit_text("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")

@router.callback_query(F.data == "edit_specialist")
async def edit_specialist(call: CallbackQuery):
    specialists = await get_all_specialists()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for s in specialists:
        text += f"{s['avatar']} <b>{s['name']}</b> ‚Äî {s['bio']}\n"
    await call.message.edit_text(text, reply_markup=specialists_kb(specialists), parse_mode="HTML")

@router.callback_query(F.data.startswith("edit_spec_"))
async def edit_spec_details(call: CallbackQuery):
    spec_id = int(call.data.split("_")[2])
    await call.message.edit_text(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Å ID {spec_id} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")

@router.callback_query(F.data == "delete_specialist")
async def delete_specialist(call: CallbackQuery):
    specialists = await get_all_specialists()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for s in specialists:
        text += f"{s['avatar']} <b>{s['name']}</b> ‚Äî {s['bio']}\n"
    await call.message.edit_text(text, reply_markup=specialists_kb(specialists), parse_mode="HTML")

@router.callback_query(F.data.startswith("delete_spec_"))
async def delete_spec_confirm(call: CallbackQuery):
    spec_id = int(call.data.split("_")[2])
    from db.repositories import aiosqlite
    from core.settings import settings
    async with aiosqlite.connect(settings.db_file) as db:
        await db.execute("DELETE FROM specialists WHERE id = ?", (spec_id,))
        await db.commit()
    await call.message.edit_text(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å ID {spec_id} —É–¥–∞–ª—ë–Ω.")

@router.callback_query(F.data == "manage_services")
async def manage_services(call: CallbackQuery):
    services = await get_services_for_specialist(call.from_user.id)
    text = "–í–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n" if services else "–£ –≤–∞—Å –Ω–µ—Ç —É—Å–ª—É–≥. –î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é?"
    for s in services:
        text += f"{s['emoji']} <b>{s['name']}</b> ‚Äî {s['duration']} –º–∏–Ω, {s['price']}‚ÇΩ\n"
    kb = [
        [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", "callback_data": "add_service"}],
        [{"text": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É", "callback_data": "edit_service"}],
        [{"text": "‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", "callback_data": "delete_service"}],
        [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back"}]
    ]
    await call.message.edit_text(text, reply_markup={"inline_keyboard": kb}, parse_mode="HTML")

@router.callback_query(F.data == "add_service")
async def add_service(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:")
    await state.set_state(AddServiceFSM.name)

@router.message(AddServiceFSM.name)
async def add_service_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Å–ª—É–≥–∏:")
    await state.set_state(AddServiceFSM.emoji)

@router.message(AddServiceFSM.emoji)
async def add_service_emoji(msg: Message, state: FSMContext):
    await state.update_data(emoji=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:")
    await state.set_state(AddServiceFSM.duration)

@router.message(AddServiceFSM.duration)
async def add_service_duration(msg: Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã):")
        return
    await state.update_data(duration=int(msg.text))
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(AddServiceFSM.price)

@router.message(AddServiceFSM.price)
async def add_service_price(msg: Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ä—É–±–ª–∏):")
        return
    await state.update_data(price=int(msg.text))
    data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    from db.repositories import aiosqlite
    from core.settings import settings
    async with aiosqlite.connect(settings.db_file) as db:
        await db.execute(
            "INSERT INTO services (specialist_id, name, emoji, duration, price) VALUES (?, ?, ?, ?, ?)",
            (msg.from_user.id, data['name'], data['emoji'], data['duration'], data['price'])
        )
        await db.commit()
    await msg.answer("–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@router.callback_query(F.data == "delete_service")
async def delete_service(call: CallbackQuery, state: FSMContext):
    services = await get_services_for_specialist(call.from_user.id)
    if not services:
        await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{s['emoji']} {s['name']}", callback_data=f"del_srv_{s['id']}")]
            for s in services
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    )
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(DeleteServiceFSM.select)

@router.callback_query(DeleteServiceFSM.select, F.data.startswith("del_srv_"))
async def delete_service_confirm(call: CallbackQuery, state: FSMContext):
    srv_id = int(call.data.split("_")[2])
    await state.update_data(srv_id=srv_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_del_srv")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back")]
        ]
    )
    await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?", reply_markup=kb)
    await state.set_state(DeleteServiceFSM.confirm)

@router.callback_query(DeleteServiceFSM.confirm, F.data == "confirm_del_srv")
async def delete_service_do(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    srv_id = data.get("srv_id")
    from db.repositories import aiosqlite
    from core.settings import settings
    async with aiosqlite.connect(settings.db_file) as db:
        await db.execute("DELETE FROM services WHERE id = ?", (srv_id,))
        await db.commit()
    await call.message.edit_text("–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await state.clear()

@router.callback_query(F.data == "view_statistics")
async def view_statistics(call: CallbackQuery):
    # –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = "–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: 100\n–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: 50\n–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 4.8"
    await call.message.edit_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{stats}")

# –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ê–ó–í–ò–¢–ò–Æ –ü–†–û–ï–ö–¢–ê

"""
1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏:
   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤–æ.
   - –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–º—è, –∞–≤–∞—Ç–∞—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–¥.).
   - –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è).
   - –ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å–ª—É–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞).

2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:
   - –¢–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥.
   - –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è.
   - –ù–µ—Ç FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —ç–º–æ–¥–∑–∏).
   - –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–≤—è–∑—å —É—Å–ª—É–≥ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ (—Å–µ–π—á–∞—Å get_services_for_specialist –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞).

3. –û—Ç–∑—ã–≤—ã:
   - –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.
   - –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã.
   - –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏/–ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–∑—ã–≤–∞–º.

4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
   - –¢–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞.
   - –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —É—Å–ª—É–≥, –∑–∞–ø–∏—Å–µ–π, –æ—Ç–∑—ã–≤—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –∏ —Ç.–¥.

5. UI/UX:
   - –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
   - –ù–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –≤ FSM.
   - –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î.

6. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.
   - –ù–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞.

7. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
   - –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–∞–∑–∞–Ω–∞ –ø–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º.
   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–Ω–µ—Å—Ç–∏ –≤—Å—é —Ä–∞–±–æ—Ç—É —Å –ë–î –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏/—Å–µ—Ä–≤–∏—Å—ã.
   - FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã.

–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –®–ê–ì–ò:
- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ —É—Å–ª—É–≥.
- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ (CRUD).
- –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞/—É—Å–ª—É–≥–∏).
- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤.
- –£–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
- –í—ã–Ω–µ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ä–∞–±–æ—Ç—É —Å –ë–î –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏.
- –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
- –ü–æ–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∞–º–∏ (—é–Ω–∏—Ç/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏).
"""