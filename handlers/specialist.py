from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

from services.specialist_service import SpecialistService
from db.repositories import get_services_for_specialist
from keyboards.client import main_menu, services_kb, confirm_kb
from utils.texts import *

router = Router(name=__name__)

class SpecialistFSM(StatesGroup):
    ADD_NAME = State()
    ADD_DURATION = State()
    ADD_PRICE = State()
    ADD_EMOJI = State()
    CONFIRM = State()

@router.callback_query(F.data == "specialist_menu")
async def specialist_menu(call: CallbackQuery, state: FSMContext):
    services = await get_services_for_specialist(call.from_user.id)
    text = "–í–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n" if services else "–£ –≤–∞—Å –Ω–µ—Ç —É—Å–ª—É–≥. –î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é?"
    for s in services:
        text += f"{s['emoji']} <b>{s['name']}</b> ‚Äî {s['duration']} –º–∏–Ω, {s['price']}‚ÇΩ\n"
    kb = [
        [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", "callback_data": "add_service"}],
        [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back"}]
    ]
    await call.message.edit_text(text, reply_markup={"inline_keyboard": kb}, parse_mode="HTML")

@router.callback_query(F.data == "add_service")
async def add_service_start(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:")
    await state.set_state(SpecialistFSM.ADD_NAME)

@router.message(SpecialistFSM.ADD_NAME)
async def add_service_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω):")
    await state.set_state(SpecialistFSM.ADD_DURATION)

@router.message(SpecialistFSM.ADD_DURATION)
async def add_service_duration(msg: Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã):")
        return
    await state.update_data(duration=int(msg.text))
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (‚ÇΩ):")
    await state.set_state(SpecialistFSM.ADD_PRICE)

@router.message(SpecialistFSM.ADD_PRICE)
async def add_service_price(msg: Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—Ä—É–±–ª–∏):")
        return
    await state.update_data(price=int(msg.text))
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ emoji –¥–ª—è —É—Å–ª—É–≥–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ):")
    await state.set_state(SpecialistFSM.ADD_EMOJI)

@router.message(SpecialistFSM.ADD_EMOJI)
async def add_service_emoji(msg: Message, state: FSMContext):
    await state.update_data(emoji=msg.text)
    data = await state.get_data()
    preview = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
        f"{data['emoji']} <b>{data['name']}</b>\n"
        f"‚è± {data['duration']} –º–∏–Ω\n"
        f"üí∞ {data['price']}‚ÇΩ"
    )
    await msg.answer(preview, reply_markup=confirm_kb(), parse_mode="HTML")
    await state.set_state(SpecialistFSM.CONFIRM)

@router.callback_query(SpecialistFSM.CONFIRM, F.data == "confirm")
async def add_service_confirm(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    from db.repositories import aiosqlite
    from core.settings import settings
    async with aiosqlite.connect(settings.db_file) as db:
        await db.execute(
            "INSERT INTO services (specialist_id, name, duration, price, emoji) VALUES (?, ?, ?, ?, ?)",
            (call.from_user.id, data['name'], data['duration'], data['price'], data['emoji'])
        )
        await db.commit()
    await call.message.edit_text("–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())
    await state.clear()

@router.callback_query(SpecialistFSM.CONFIRM, F.data == "cancel")
async def add_service_cancel(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
    await state.clear()