# db_manager.py
# –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å SQLite –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ —É—Å–ª—É–≥

import aiosqlite
import os

DB_FILE = "telezapis.db"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã ---
async def init_test_db():
    if os.path.exists(DB_FILE):
        os.remove(DB_FILE)
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
        CREATE TABLE specialists (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            avatar TEXT,
            bio TEXT
        );
        """)
        await db.execute("""
        CREATE TABLE services (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            specialist_id INTEGER,
            name TEXT NOT NULL,
            duration INTEGER, -- –º–∏–Ω
            price INTEGER,    -- —Ä—É–±
            emoji TEXT,
            FOREIGN KEY (specialist_id) REFERENCES specialists(id)
        );
        """)
        # –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        specialists = [
            ("–ò—Ä–∏–Ω–∞", "üíá‚Äç‚ôÄÔ∏è", "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä –≤—ã—Å—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –õ—é–±–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–æ—Ç—É!"),
            ("–ú–∞—Ä–∏—è", "üíÜ‚Äç‚ôÄÔ∏è", "–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä –ø–æ —É—Ö–æ–¥—É –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏. –í—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!"),
            ("–û–ª—å–≥–∞", "üíÑ", "–°—Ç–∏–ª–∏—Å—Ç-–∫–æ–ª–æ—Ä–∏—Å—Ç. –ú–æ–∏ –ø—Ä–∏—á–µ—Å–∫–∏ ‚Äî –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"),
        ]
        for name, avatar, bio in specialists:
            await db.execute(
                "INSERT INTO specialists (name, avatar, bio) VALUES (?, ?, ?)",
                (name, avatar, bio)
            )
        # –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        services = [
            (1, "–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è", 40, 1500, "‚úÇÔ∏è"),
            (1, "–£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å", 30, 1000, "üíÅ‚Äç‚ôÄÔ∏è"),
            (1, "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", 90, 3500, "üé®"),
            (2, "–ú–∞—Å—Å–∞–∂ –≥–æ–ª–æ–≤—ã", 20, 700, "ü§≤"),
            (2, "–õ–µ—á–µ–Ω–∏–µ –≤–æ–ª–æ—Å", 45, 2000, "üß¥"),
            (3, "–í–µ—á–µ—Ä–Ω—è—è —É–∫–ª–∞–¥–∫–∞", 60, 2500, "üåü"),
            (3, "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –ø—Ä—è–¥–µ–π", 55, 1800, "üñåÔ∏è"),
        ]
        for specialist_id, name, duration, price, emoji in services:
            await db.execute(
                "INSERT INTO services (specialist_id, name, duration, price, emoji) VALUES (?, ?, ?, ?, ?)",
                (specialist_id, name, duration, price, emoji)
            )
        await db.commit()

# --- –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ —É—Å–ª—É–≥ ---
async def get_all_specialists():
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute("SELECT id, name, avatar, bio FROM specialists")
        rows = await cursor.fetchall()
        return [
            {"id": row[0], "name": row[1], "avatar": row[2], "bio": row[3]}
            for row in rows
        ]

async def get_services_by_specialist(specialist_id):
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute(
            "SELECT id, name, duration, price, emoji FROM services WHERE specialist_id = ?",
            (specialist_id,)
        )
        rows = await cursor.fetchall()
        return [
            {"id": row[0], "name": row[1], "duration": row[2], "price": row[3], "emoji": row[4]}
            for row in rows
        ]

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ –ø–æ id ---
async def get_specialist_by_id(specialist_id):
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute(
            "SELECT id, name, avatar, bio FROM specialists WHERE id = ?",
            (specialist_id,)
        )
        row = await cursor.fetchone()
        if row:
            return {"id": row[0], "name": row[1], "avatar": row[2], "bio": row[3]}
        return None

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ –ø–æ id ---
async def get_service_by_id(service_id):
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute(
            "SELECT id, specialist_id, name, duration, price, emoji FROM services WHERE id = ?",
            (service_id,)
        )
        row = await cursor.fetchone()
        if row:
            return {
                "id": row[0],
                "specialist_id": row[1],
                "name": row[2],
                "duration": row[3],
                "price": row[4],
                "emoji": row[5]
            }
        return None